#pragma once
#include <string>
#include <vector>
#include <tuple>
#include <map>

namespace ps
{
	inline std::vector<std::string> WINGET = {
		"Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted",
		"Install-Script -Name winget-install -Force",
		"winget-install.ps1"
	};
	
	inline std::vector<std::string> DEBLOAT = {
		R"($ErrorActionPreference = 'silentlycontinue')",
		R"($DebloatFolder = "C:\Temp\Windows10Debloater")",
		R"(If (Test-Path $DebloatFolder) {)",
		R"(    Write-Output "$DebloatFolder exists. Skipping.")",
		R"(})",
		R"(Else {)",
		R"(    Write-Output "The folder '$DebloatFolder' doesn't exist. This folder will be used for storing logs created after the script runs. Creating now.")",
		R"(    Start-Sleep 1)",
		R"(    New-Item -Path "$DebloatFolder" -ItemType Directory)",
		R"(    Write-Output "The folder $DebloatFolder was successfully created.")",
		R"(})",
		R"(Start-Transcript -OutputDirectory "$DebloatFolder")",
		R"(Add-Type -AssemblyName PresentationCore, PresentationFramework)",
		R"(Function DebloatAll {)",
		R"(    #Removes AppxPackages)",
		R"(    #Credit to /u/GavinEke for a modified version of my whitelist code)",
		R"(    $WhitelistedApps = 'Microsoft.ScreenSketch|Microsoft.Paint3D|Microsoft.WindowsCalculator|Microsoft.WindowsStore|Microsoft.Windows.Photos|CanonicalGroupLimited.UbuntuonWindows|`)",
		R"(    Microsoft.XboxGameCallableUI|Microsoft.XboxGamingOverlay|Microsoft.Xbox.TCUI|Microsoft.XboxGamingOverlay|Microsoft.XboxIdentityProvider|Microsoft.MicrosoftStickyNotes|Microsoft.MSPaint|Microsoft.WindowsCamera|.NET|Framework|`)",
		R"(    Microsoft.HEIFImageExtension|Microsoft.ScreenSketch|Microsoft.StorePurchaseApp|Microsoft.VP9VideoExtensions|Microsoft.WebMediaExtensions|Microsoft.WebpImageExtension|Microsoft.DesktopAppInstaller|WindSynthBerry|MIDIBerry|Slack')",
		R"(    #NonRemovable Apps that where getting attempted and the system would reject the uninstall, speeds up debloat and prevents 'initalizing' overlay when removing apps)",
		R"(    $NonRemovable = '1527c705-839a-4832-9118-54d4Bd6a0c89|c5e2524a-ea46-4f67-841f-6a9465d9d515|E2A4F912-2574-4A75-9BB0-0D023378592B|F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE|InputApp|Microsoft.AAD.BrokerPlugin|Microsoft.AccountsControl|`)",
		R"(    Microsoft.BioEnrollment|Microsoft.CredDialogHost|Microsoft.ECApp|Microsoft.LockApp|Microsoft.MicrosoftEdgeDevToolsClient|Microsoft.MicrosoftEdge|Microsoft.PPIProjection|Microsoft.Win32WebViewHost|Microsoft.Windows.Apprep.ChxApp|`)",
		R"(    Microsoft.Windows.AssignedAccessLockApp|Microsoft.Windows.CapturePicker|Microsoft.Windows.CloudExperienceHost|Microsoft.Windows.ContentDeliveryManager|Microsoft.Windows.Cortana|Microsoft.Windows.NarratorQuickStart|`)",
		R"(    Microsoft.Windows.ParentalControls|Microsoft.Windows.PeopleExperienceHost|Microsoft.Windows.PinningConfirmationDialog|Microsoft.Windows.SecHealthUI|Microsoft.Windows.SecureAssessmentBrowser|Microsoft.Windows.ShellExperienceHost|`)",
		R"(    Microsoft.Windows.XGpuEjectDialog|Microsoft.XboxGameCallableUI|Windows.CBSPreview|windows.immersivecontrolpanel|Windows.PrintDialog|Microsoft.VCLibs.140.00|Microsoft.Services.Store.Engagement|Microsoft.UI.Xaml.2.0|*Nvidia*')",
		R"(    Get-AppxPackage -AllUsers | Where-Object {$_.Name -NotMatch $WhitelistedApps -and $_.Name -NotMatch $NonRemovable} | Remove-AppxPackage)",
		R"(    Get-AppxPackage | Where-Object {$_.Name -NotMatch $WhitelistedApps -and $_.Name -NotMatch $NonRemovable} | Remove-AppxPackage)",
		R"(    Get-AppxProvisionedPackage -Online | Where-Object {$_.PackageName -NotMatch $WhitelistedApps -and $_.PackageName -NotMatch $NonRemovable} | Remove-AppxProvisionedPackage -Online)",
		R"(})",
		R"(Function DebloatBlacklist {)",
		R"(    $Bloatware = @()",
		R"(        #Unnecessary Windows 10 AppX Apps)",
		R"(        "Microsoft.BingNews")",
		R"(        "Microsoft.GetHelp")",
		R"(        "Microsoft.Getstarted")",
		R"(        "Microsoft.Messaging")",
		R"(        "Microsoft.Microsoft3DViewer")",
		R"(        "Microsoft.MicrosoftOfficeHub")",
		R"(        "Microsoft.MicrosoftSolitaireCollection")",
		R"(        "Microsoft.NetworkSpeedTest")",
		R"(        "Microsoft.News")",
		R"(        "Microsoft.Office.Lens")",
		R"(        "Microsoft.Office.OneNote")",
		R"(        "Microsoft.Office.Sway")",
		R"(        "Microsoft.OneConnect")",
		R"(        "Microsoft.People")",
		R"(        "Microsoft.Print3D")",
		R"(        "Microsoft.RemoteDesktop")",
		R"(        "Microsoft.SkypeApp")",
		R"(        "Microsoft.StorePurchaseApp")",
		R"(        "Microsoft.Office.Todo.List")",
		R"(        "Microsoft.Whiteboard")",
		R"(        "Microsoft.WindowsAlarms")",
		R"(        #"Microsoft.WindowsCamera")",
		R"(        "microsoft.windowscommunicationsapps")",
		R"(        "Microsoft.WindowsFeedbackHub")",
		R"(        "Microsoft.WindowsMaps")",
		R"(        "Microsoft.WindowsSoundRecorder")",
		R"(        "Microsoft.Xbox.TCUI")",
		R"(        "Microsoft.XboxApp")",
		R"(        "Microsoft.XboxGameOverlay")",
		R"(        "Microsoft.XboxIdentityProvider")",
		R"(        "Microsoft.XboxSpeechToTextOverlay")",
		R"(        "Microsoft.ZuneMusic")",
		R"(        "Microsoft.ZuneVideo")",
		R"(        #Sponsored Windows 10 AppX Apps)",
		R"(        #Add sponsored/featured apps to remove in the "*AppName*" format)",
		R"(        "*EclipseManager*")",
		R"(        "*ActiproSoftwareLLC*")",
		R"(        "*AdobeSystemsIncorporated.AdobePhotoshopExpress*")",
		R"(        "*Duolingo-LearnLanguagesforFree*")",
		R"(        "*PandoraMediaInc*")",
		R"(        "*CandyCrush*")",
		R"(        "*BubbleWitch3Saga*")",
		R"(        "*Wunderlist*")",
		R"(        "*Flipboard*")",
		R"(        "*Twitter*")",
		R"(        "*Facebook*")",
		R"(        "*Spotify*")",
		R"(        "*Minecraft*")",
		R"(        "*Royal Revolt*")",
		R"(        "*Sway*")",
		R"(        "*Speed Test*")",
		R"(        "*Dolby*")",
		R"(             )",
		R"(        #Optional: Typically not removed but you can if you need to for some reason)",
		R"(        #"*Microsoft.Advertising.Xaml_10.1712.5.0_x64__8wekyb3d8bbwe*")",
		R"(        #"*Microsoft.Advertising.Xaml_10.1712.5.0_x86__8wekyb3d8bbwe*")",
		R"(        #"*Microsoft.BingWeather*")",
		R"(        #"*Microsoft.MSPaint*")",
		R"(        #"*Microsoft.MicrosoftStickyNotes*")",
		R"(        #"*Microsoft.Windows.Photos*")",
		R"(        #"*Microsoft.WindowsCalculator*")",
		R"(        #"*Microsoft.WindowsStore*")",
		R"(    ))",
		R"(    foreach ($Bloat in $Bloatware) {)",
		R"(        Get-AppxPackage -Name $Bloat| Remove-AppxPackage)",
		R"(        Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like $Bloat | Remove-AppxProvisionedPackage -Online)",
		R"(        Write-Output "Trying to remove $Bloat.")",
		R"(    })",
		R"(})",
		R"(Function Remove-Keys {)",
		R"(        )",
		R"(    #These are the registry keys that it will delete.)",
		R"(            )",
		R"(    $Keys = @()",
		R"(            )",
		R"(        #Remove Background Tasks)",
		R"(        "HKCR:\Extensions\ContractId\Windows.BackgroundTasks\PackageId\46928bounde.EclipseManager_2.2.4.51_neutral__a5h4egax66k6y")",
		R"(        "HKCR:\Extensions\ContractId\Windows.BackgroundTasks\PackageId\ActiproSoftwareLLC.562882FEEB491_2.6.18.18_neutral__24pqs290vpjk0")",
		R"(        "HKCR:\Extensions\ContractId\Windows.BackgroundTasks\PackageId\Microsoft.MicrosoftOfficeHub_17.7909.7600.0_x64__8wekyb3d8bbwe")",
		R"(        "HKCR:\Extensions\ContractId\Windows.BackgroundTasks\PackageId\Microsoft.PPIProjection_10.0.15063.0_neutral_neutral_cw5n1h2txyewy")",
		R"(        "HKCR:\Extensions\ContractId\Windows.BackgroundTasks\PackageId\Microsoft.XboxGameCallableUI_1000.15063.0.0_neutral_neutral_cw5n1h2txyewy")",
		R"(        "HKCR:\Extensions\ContractId\Windows.BackgroundTasks\PackageId\Microsoft.XboxGameCallableUI_1000.16299.15.0_neutral_neutral_cw5n1h2txyewy")",
		R"(            )",
		R"(        #Windows File)",
		R"(        "HKCR:\Extensions\ContractId\Windows.File\PackageId\ActiproSoftwareLLC.562882FEEB491_2.6.18.18_neutral__24pqs290vpjk0")",
		R"(            )",
		R"(        #Registry keys to delete if they aren't uninstalled by RemoveAppXPackage/RemoveAppXProvisionedPackage)",
		R"(        "HKCR:\Extensions\ContractId\Windows.Launch\PackageId\46928bounde.EclipseManager_2.2.4.51_neutral__a5h4egax66k6y")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Launch\PackageId\ActiproSoftwareLLC.562882FEEB491_2.6.18.18_neutral__24pqs290vpjk0")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Launch\PackageId\Microsoft.PPIProjection_10.0.15063.0_neutral_neutral_cw5n1h2txyewy")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Launch\PackageId\Microsoft.XboxGameCallableUI_1000.15063.0.0_neutral_neutral_cw5n1h2txyewy")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Launch\PackageId\Microsoft.XboxGameCallableUI_1000.16299.15.0_neutral_neutral_cw5n1h2txyewy")",
		R"(            )",
		R"(        #Scheduled Tasks to delete)",
		R"(        "HKCR:\Extensions\ContractId\Windows.PreInstalledConfigTask\PackageId\Microsoft.MicrosoftOfficeHub_17.7909.7600.0_x64__8wekyb3d8bbwe")",
		R"(            )",
		R"(        #Windows Protocol Keys)",
		R"(        "HKCR:\Extensions\ContractId\Windows.Protocol\PackageId\ActiproSoftwareLLC.562882FEEB491_2.6.18.18_neutral__24pqs290vpjk0")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Protocol\PackageId\Microsoft.PPIProjection_10.0.15063.0_neutral_neutral_cw5n1h2txyewy")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Protocol\PackageId\Microsoft.XboxGameCallableUI_1000.15063.0.0_neutral_neutral_cw5n1h2txyewy")",
		R"(        "HKCR:\Extensions\ContractId\Windows.Protocol\PackageId\Microsoft.XboxGameCallableUI_1000.16299.15.0_neutral_neutral_cw5n1h2txyewy")",
		R"(               )",
		R"(        #Windows Share Target)",
		R"(        "HKCR:\Extensions\ContractId\Windows.ShareTarget\PackageId\ActiproSoftwareLLC.562882FEEB491_2.6.18.18_neutral__24pqs290vpjk0")",
		R"(    ))",
		R"(        )",
		R"(    #This writes the output of each key it is removing and also removes the keys listed above.)",
		R"(    ForEach ($Key in $Keys) {)",
		R"(        Write-Output "Removing $Key from registry")",
		R"(        Remove-Item $Key -Recurse)",
		R"(    })",
		R"(})",
		R"(            )",
		R"(Function Protect-Privacy {)",
		R"(            )",
		R"(    #Disables Windows Feedback Experience)",
		R"(    Write-Output "Disabling Windows Feedback Experience program")",
		R"(    $Advertising = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo")",
		R"(    If (Test-Path $Advertising) {)",
		R"(        Set-ItemProperty $Advertising Enabled -Value 0 )",
		R"(    })",
		R"(            )",
		R"(    #Stops Cortana from being used as part of your Windows Search Function)",
		R"(    Write-Output "Stopping Cortana from being used as part of your Windows Search Function")",
		R"(    $Search = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search")",
		R"(    If (Test-Path $Search) {)",
		R"(        Set-ItemProperty $Search AllowCortana -Value 0 )",
		R"(    })",
		R"(    #Disables Web Search in Start Menu)",
		R"(    Write-Output "Disabling Bing Search in Start Menu")",
		R"(    $WebSearch = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search")",
		R"(    Set-ItemProperty "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Search" BingSearchEnabled -Value 0 )",
		R"(    If (!(Test-Path $WebSearch)) {)",
		R"(        New-Item $WebSearch)",
		R"(    })",
		R"(    Set-ItemProperty $WebSearch DisableWebSearch -Value 1 )",
		R"(            )",
		R"(    #Stops the Windows Feedback Experience from sending anonymous data)",
		R"(    Write-Output "Stopping the Windows Feedback Experience program")",
		R"(    $Period = "HKCU:\Software\Microsoft\Siuf\Rules")",
		R"(    If (!(Test-Path $Period)) { )",
		R"(        New-Item $Period)",
		R"(    })",
		R"(    Set-ItemProperty $Period PeriodInNanoSeconds -Value 0 )",
		R"(    #Prevents bloatware applications from returning and removes Start Menu suggestions               )",
		R"(    Write-Output "Adding Registry key to prevent bloatware apps from returning")",
		R"(    $registryPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent")",
		R"(    $registryOEM = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager")",
		R"(    If (!(Test-Path $registryPath)) { )",
		R"(        New-Item $registryPath)",
		R"(    })",
		R"(    Set-ItemProperty $registryPath DisableWindowsConsumerFeatures -Value 1 )",
		R"(    If (!(Test-Path $registryOEM)) {)",
		R"(        New-Item $registryOEM)",
		R"(    })",
		R"(    Set-ItemProperty $registryOEM  ContentDeliveryAllowed -Value 0 )",
		R"(    Set-ItemProperty $registryOEM  OemPreInstalledAppsEnabled -Value 0 )",
		R"(    Set-ItemProperty $registryOEM  PreInstalledAppsEnabled -Value 0 )",
		R"(    Set-ItemProperty $registryOEM  PreInstalledAppsEverEnabled -Value 0 )",
		R"(    Set-ItemProperty $registryOEM  SilentInstalledAppsEnabled -Value 0 )",
		R"(    Set-ItemProperty $registryOEM  SystemPaneSuggestionsEnabled -Value 0          )",
		R"(    )",
		R"(    #Preping mixed Reality Portal for removal    )",
		R"(    Write-Output "Setting Mixed Reality Portal value to 0 so that you can uninstall it in Settings")",
		R"(    $Holo = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Holographic"    )",
		R"(    If (Test-Path $Holo) {)",
		R"(        Set-ItemProperty $Holo  FirstRunSucceeded -Value 0 )",
		R"(    })",
		R"(    #Disables Wi-fi Sense)",
		R"(    Write-Output "Disabling Wi-Fi Sense")",
		R"(    $WifiSense1 = "HKLM:\SOFTWARE\Microsoft\PolicyManager\default\WiFi\AllowWiFiHotSpotReporting")",
		R"(    $WifiSense2 = "HKLM:\SOFTWARE\Microsoft\PolicyManager\default\WiFi\AllowAutoConnectToWiFiSenseHotspots")",
		R"(    $WifiSense3 = "HKLM:\SOFTWARE\Microsoft\WcmSvc\wifinetworkmanager\config")",
		R"(    If (!(Test-Path $WifiSense1)) {)",
		R"(        New-Item $WifiSense1)",
		R"(    })",
		R"(    Set-ItemProperty $WifiSense1  Value -Value 0 )",
		R"(    If (!(Test-Path $WifiSense2)) {)",
		R"(        New-Item $WifiSense2)",
		R"(    })",
		R"(    Set-ItemProperty $WifiSense2  Value -Value 0 )",
		R"(    Set-ItemProperty $WifiSense3  AutoConnectAllowedOEM -Value 0 )",
		R"(        )",
		R"(    #Disables live tiles)",
		R"(    Write-Output "Disabling live tiles")",
		R"(    $Live = "HKCU:\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\PushNotifications"    )",
		R"(    If (!(Test-Path $Live)) {      )",
		R"(        New-Item $Live)",
		R"(    })",
		R"(    Set-ItemProperty $Live  NoTileApplicationNotification -Value 1 )",
		R"(        )",
		R"(    #Turns off Data Collection via the AllowTelemtry key by changing it to 0)",
		R"(    Write-Output "Turning off Data Collection")",
		R"(    $DataCollection1 = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection")",
		R"(    $DataCollection2 = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection")",
		R"(    $DataCollection3 = "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Policies\DataCollection"    )",
		R"(    If (Test-Path $DataCollection1) {)",
		R"(        Set-ItemProperty $DataCollection1  AllowTelemetry -Value 0 )",
		R"(    })",
		R"(    If (Test-Path $DataCollection2) {)",
		R"(        Set-ItemProperty $DataCollection2  AllowTelemetry -Value 0 )",
		R"(    })",
		R"(    If (Test-Path $DataCollection3) {)",
		R"(        Set-ItemProperty $DataCollection3  AllowTelemetry -Value 0 )",
		R"(    })",
		R"(    )",
		R"(    #Disabling Location Tracking)",
		R"(    Write-Output "Disabling Location Tracking")",
		R"(    $SensorState = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Sensor\Overrides\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}")",
		R"(    $LocationConfig = "HKLM:\SYSTEM\CurrentControlSet\Services\lfsvc\Service\Configuration")",
		R"(    If (!(Test-Path $SensorState)) {)",
		R"(        New-Item $SensorState)",
		R"(    })",
		R"(    Set-ItemProperty $SensorState SensorPermissionState -Value 0 )",
		R"(    If (!(Test-Path $LocationConfig)) {)",
		R"(        New-Item $LocationConfig)",
		R"(    })",
		R"(    Set-ItemProperty $LocationConfig Status -Value 0 )",
		R"(        )",
		R"(    #Disables People icon on Taskbar)",
		R"(    Write-Output "Disabling People icon on Taskbar")",
		R"(    $People = 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People')",
		R"(    If (Test-Path $People) {)",
		R"(        Set-ItemProperty $People -Name PeopleBand -Value 0)",
		R"(    })",
		R"(        )",
		R"(    #Disables scheduled tasks that are considered unnecessary )",
		R"(    Write-Output "Disabling scheduled tasks")",
		R"(    Get-ScheduledTask  XblGameSaveTaskLogon | Disable-ScheduledTask)",
		R"(    Get-ScheduledTask  XblGameSaveTask | Disable-ScheduledTask)",
		R"(    Get-ScheduledTask  Consolidator | Disable-ScheduledTask)",
		R"(    Get-ScheduledTask  UsbCeip | Disable-ScheduledTask)",
		R"(    Get-ScheduledTask  DmClient | Disable-ScheduledTask)",
		R"(    Get-ScheduledTask  DmClientOnScenarioDownload | Disable-ScheduledTask)",
		R"(    Write-Output "Stopping and disabling Diagnostics Tracking Service")",
		R"(    #Disabling the Diagnostics Tracking Service)",
		R"(    Stop-Service "DiagTrack")",
		R"(    Set-Service "DiagTrack" -StartupType Disabled)",
		R"(    )",
		R"(    Write-Output "Removing CloudStore from registry if it exists")",
		R"(    $CloudStore = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\CloudStore')",
		R"(    If (Test-Path $CloudStore) {)",
		R"(        Stop-Process Explorer.exe -Force)",
		R"(        Remove-Item $CloudStore -Recurse -Force)",
		R"(        Start-Process Explorer.exe -Wait)",
		R"(    })",
		R"(})",
		R"(Function DisableCortana {)",
		R"(    Write-Host "Disabling Cortana")",
		R"(    $Cortana1 = "HKCU:\SOFTWARE\Microsoft\Personalization\Settings")",
		R"(    $Cortana2 = "HKCU:\SOFTWARE\Microsoft\InputPersonalization")",
		R"(    $Cortana3 = "HKCU:\SOFTWARE\Microsoft\InputPersonalization\TrainedDataStore")",
		R"(    If (!(Test-Path $Cortana1)) {)",
		R"(        New-Item $Cortana1)",
		R"(    })",
		R"(    Set-ItemProperty $Cortana1 AcceptedPrivacyPolicy -Value 0 )",
		R"(    If (!(Test-Path $Cortana2)) {)",
		R"(        New-Item $Cortana2)",
		R"(    })",
		R"(    Set-ItemProperty $Cortana2 RestrictImplicitTextCollection -Value 1 )",
		R"(    Set-ItemProperty $Cortana2 RestrictImplicitInkCollection -Value 1 )",
		R"(    If (!(Test-Path $Cortana3)) {)",
		R"(        New-Item $Cortana3)",
		R"(    })",
		R"(    Set-ItemProperty $Cortana3 HarvestContacts -Value 0)",
		R"(    )",
		R"(})",
		R"(Function EnableCortana {)",
		R"(    Write-Host "Re-enabling Cortana")",
		R"(    $Cortana1 = "HKCU:\SOFTWARE\Microsoft\Personalization\Settings")",
		R"(    $Cortana2 = "HKCU:\SOFTWARE\Microsoft\InputPersonalization")",
		R"(    $Cortana3 = "HKCU:\SOFTWARE\Microsoft\InputPersonalization\TrainedDataStore")",
		R"(    If (!(Test-Path $Cortana1)) {)",
		R"(        New-Item $Cortana1)",
		R"(    })",
		R"(    Set-ItemProperty $Cortana1 AcceptedPrivacyPolicy -Value 1 )",
		R"(    If (!(Test-Path $Cortana2)) {)",
		R"(        New-Item $Cortana2)",
		R"(    })",
		R"(    Set-ItemProperty $Cortana2 RestrictImplicitTextCollection -Value 0 )",
		R"(    Set-ItemProperty $Cortana2 RestrictImplicitInkCollection -Value 0 )",
		R"(    If (!(Test-Path $Cortana3)) {)",
		R"(        New-Item $Cortana3)",
		R"(    })",
		R"(    Set-ItemProperty $Cortana3 HarvestContacts -Value 1 )",
		R"(})",
		R"(        )",
		R"(Function Stop-EdgePDF {)",
		R"(    )",
		R"(    #Stops edge from taking over as the default .PDF viewer    )",
		R"(    Write-Output "Stopping Edge from taking over as the default .PDF viewer")",
		R"(    $NoPDF = "HKCR:\.pdf")",
		R"(    $NoProgids = "HKCR:\.pdf\OpenWithProgids")",
		R"(    $NoWithList = "HKCR:\.pdf\OpenWithList" )",
		R"(    If (!(Get-ItemProperty $NoPDF  NoOpenWith)) {)",
		R"(        New-ItemProperty $NoPDF NoOpenWith )",
		R"(    }        )",
		R"(    If (!(Get-ItemProperty $NoPDF  NoStaticDefaultVerb)) {)",
		R"(        New-ItemProperty $NoPDF  NoStaticDefaultVerb )",
		R"(    }        )",
		R"(    If (!(Get-ItemProperty $NoProgids  NoOpenWith)) {)",
		R"(        New-ItemProperty $NoProgids  NoOpenWith )",
		R"(    }        )",
		R"(    If (!(Get-ItemProperty $NoProgids  NoStaticDefaultVerb)) {)",
		R"(        New-ItemProperty $NoProgids  NoStaticDefaultVerb )",
		R"(    }        )",
		R"(    If (!(Get-ItemProperty $NoWithList  NoOpenWith)) {)",
		R"(        New-ItemProperty $NoWithList  NoOpenWith)",
		R"(    }        )",
		R"(    If (!(Get-ItemProperty $NoWithList  NoStaticDefaultVerb)) {)",
		R"(        New-ItemProperty $NoWithList  NoStaticDefaultVerb )",
		R"(    })",
		R"(            )",
		R"(    #Appends an underscore '_' to the Registry key for Edge)",
		R"(    $Edge = "HKCR:\AppXd4nrz8ff68srnhf9t5a8sbjyar1cr723_")",
		R"(    If (Test-Path $Edge) {)",
		R"(        Set-Item $Edge AppXd4nrz8ff68srnhf9t5a8sbjyar1cr723_ )",
		R"(    })",
		R"(})",
		R"(Function Revert-Changes {   )",
		R"(        )",
		R"(    #This function will revert the changes you made when running the Start-Debloat function.)",
		R"(        )",
		R"(    #This line reinstalls all of the bloatware that was removed)",
		R"(    Get-AppxPackage -AllUsers | ForEach {Add-AppxPackage -Verbose -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"} )",
		R"(    )",
		R"(    #Tells Windows to enable your advertising information.    )",
		R"(    Write-Output "Re-enabling key to show advertisement information")",
		R"(    $Advertising = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo")",
		R"(    If (Test-Path $Advertising) {)",
		R"(        Set-ItemProperty $Advertising  Enabled -Value 1)",
		R"(    })",
		R"(            )",
		R"(    #Enables Cortana to be used as part of your Windows Search Function)",
		R"(    Write-Output "Re-enabling Cortana to be used in your Windows Search")",
		R"(    $Search = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search")",
		R"(    If (Test-Path $Search) {)",
		R"(        Set-ItemProperty $Search  AllowCortana -Value 1 )",
		R"(    })",
		R"(            )",
		R"(    #Re-enables the Windows Feedback Experience for sending anonymous data)",
		R"(    Write-Output "Re-enabling Windows Feedback Experience")",
		R"(    $Period = "HKCU:\Software\Microsoft\Siuf\Rules")",
		R"(    If (!(Test-Path $Period)) { )",
		R"(        New-Item $Period)",
		R"(    })",
		R"(    Set-ItemProperty $Period PeriodInNanoSeconds -Value 1 )",
		R"(    )",
		R"(    #Enables bloatware applications               )",
		R"(    Write-Output "Adding Registry key to allow bloatware apps to return")",
		R"(    $registryPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent")",
		R"(    If (!(Test-Path $registryPath)) {)",
		R"(        New-Item $registryPath )",
		R"(    })",
		R"(    Set-ItemProperty $registryPath  DisableWindowsConsumerFeatures -Value 0 )",
		R"(        )",
		R"(    #Changes Mixed Reality Portal Key 'FirstRunSucceeded' to 1)",
		R"(    Write-Output "Setting Mixed Reality Portal value to 1")",
		R"(    $Holo = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Holographic")",
		R"(    If (Test-Path $Holo) {)",
		R"(        Set-ItemProperty $Holo  FirstRunSucceeded -Value 1 )",
		R"(    })",
		R"(        )",
		R"(    #Re-enables live tiles)",
		R"(    Write-Output "Enabling live tiles")",
		R"(    $Live = "HKCU:\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\PushNotifications")",
		R"(    If (!(Test-Path $Live)) {)",
		R"(        New-Item $Live )",
		R"(    })",
		R"(    Set-ItemProperty $Live  NoTileApplicationNotification -Value 0 )",
		R"(       )",
		R"(    #Re-enables data collection)",
		R"(    Write-Output "Re-enabling data collection")",
		R"(    $DataCollection = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection")",
		R"(    If (!(Test-Path $DataCollection)) {)",
		R"(        New-Item $DataCollection)",
		R"(    })",
		R"(    Set-ItemProperty $DataCollection  AllowTelemetry -Value 1)",
		R"(        )",
		R"(    #Re-enables People Icon on Taskbar)",
		R"(    Write-Output "Enabling People icon on Taskbar")",
		R"(    $People = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People")",
		R"(    If (!(Test-Path $People)) {)",
		R"(        New-Item $People )",
		R"(    })",
		R"(    Set-ItemProperty $People  PeopleBand -Value 1 )",
		R"(    )",
		R"(    #Re-enables suggestions on start menu)",
		R"(    Write-Output "Enabling suggestions on the Start Menu")",
		R"(    $Suggestions = "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager")",
		R"(    If (!(Test-Path $Suggestions)) {)",
		R"(        New-Item $Suggestions)",
		R"(    })",
		R"(    Set-ItemProperty $Suggestions  SystemPaneSuggestionsEnabled -Value 1 )",
		R"(        )",
		R"(    #Re-enables scheduled tasks that were disabled when running the Debloat switch)",
		R"(    Write-Output "Enabling scheduled tasks that were disabled")",
		R"(    Get-ScheduledTask XblGameSaveTaskLogon | Enable-ScheduledTask )",
		R"(    Get-ScheduledTask  XblGameSaveTask | Enable-ScheduledTask )",
		R"(    Get-ScheduledTask  Consolidator | Enable-ScheduledTask )",
		R"(    Get-ScheduledTask  UsbCeip | Enable-ScheduledTask )",
		R"(    Get-ScheduledTask  DmClient | Enable-ScheduledTask )",
		R"(    Get-ScheduledTask  DmClientOnScenarioDownload | Enable-ScheduledTask )",
		R"(    Write-Output "Re-enabling and starting WAP Push Service")",
		R"(    #Enable and start WAP Push Service)",
		R"(    Set-Service "dmwappushservice" -StartupType Automatic)",
		R"(    Start-Service "dmwappushservice")",
		R"(    )",
		R"(    Write-Output "Re-enabling and starting the Diagnostics Tracking Service")",
		R"(    #Enabling the Diagnostics Tracking Service)",
		R"(    Set-Service "DiagTrack" -StartupType Automatic)",
		R"(    Start-Service "DiagTrack")",
		R"(    )",
		R"(    Write-Output "Restoring 3D Objects in the 'My Computer' submenu in explorer")",
		R"(    #Restoring 3D Objects in the 'My Computer' submenu in explorer)",
		R"(    Restore3dObjects)",
		R"(})",
		R"(Function CheckDMWService {)",
		R"(    Param([switch]$Debloat))",
		R"(  )",
		R"(    If (Get-Service -Name dmwappushservice | Where-Object {$_.StartType -eq "Disabled"}) {)",
		R"(        Set-Service -Name dmwappushservice -StartupType Automatic)",
		R"(    })",
		R"(    If (Get-Service -Name dmwappushservice | Where-Object {$_.Status -eq "Stopped"}) {)",
		R"(        Start-Service -Name dmwappushservice)",
		R"(    } )",
		R"(})",
		R"(    )",
		R"(Function Enable-EdgePDF {)",
		R"(    Write-Output "Setting Edge back to default")",
		R"(    $NoPDF = "HKCR:\.pdf")",
		R"(    $NoProgids = "HKCR:\.pdf\OpenWithProgids")",
		R"(    $NoWithList = "HKCR:\.pdf\OpenWithList")",
		R"(    #Sets edge back to default)",
		R"(    If (Get-ItemProperty $NoPDF  NoOpenWith) {)",
		R"(        Remove-ItemProperty $NoPDF  NoOpenWith)",
		R"(    } )",
		R"(    If (Get-ItemProperty $NoPDF  NoStaticDefaultVerb) {)",
		R"(        Remove-ItemProperty $NoPDF  NoStaticDefaultVerb )",
		R"(    }       )",
		R"(    If (Get-ItemProperty $NoProgids  NoOpenWith) {)",
		R"(        Remove-ItemProperty $NoProgids  NoOpenWith )",
		R"(    }        )",
		R"(    If (Get-ItemProperty $NoProgids  NoStaticDefaultVerb) {)",
		R"(        Remove-ItemProperty $NoProgids  NoStaticDefaultVerb )",
		R"(    }        )",
		R"(    If (Get-ItemProperty $NoWithList  NoOpenWith) {)",
		R"(        Remove-ItemProperty $NoWithList  NoOpenWith)",
		R"(    }    )",
		R"(    If (Get-ItemProperty $NoWithList  NoStaticDefaultVerb) {)",
		R"(        Remove-ItemProperty $NoWithList  NoStaticDefaultVerb)",
		R"(    })",
		R"(        )",
		R"(    #Removes an underscore '_' from the Registry key for Edge)",
		R"(    $Edge2 = "HKCR:\AppXd4nrz8ff68srnhf9t5a8sbjyar1cr723_")",
		R"(    If (Test-Path $Edge2) {)",
		R"(        Set-Item $Edge2 AppXd4nrz8ff68srnhf9t5a8sbjyar1cr723)",
		R"(    })",
		R"(})",
		R"(Function FixWhitelistedApps {)",
		R"(    )",
		R"(    If (!(Get-AppxPackage -AllUsers | Select Microsoft.Paint3D, Microsoft.WindowsCalculator, Microsoft.WindowsStore, Microsoft.Windows.Photos)) {)",
		R"(    )",
		R"(        #Credit to abulgatz for these 4 lines of code)",
		R"(        Get-AppxPackage -allusers Microsoft.Paint3D | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"})",
		R"(        Get-AppxPackage -allusers Microsoft.WindowsCalculator | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"})",
		R"(        Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"})",
		R"(        Get-AppxPackage -allusers Microsoft.Windows.Photos | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"} )",
		R"(    } )",
		R"(})",
		R"(Function UninstallOneDrive {)",
		R"(    Write-Host "Checking for pre-existing files and folders located in the OneDrive folders...")",
		R"(    Start-Sleep 1)",
		R"(    If (Test-Path "$env:USERPROFILE\OneDrive\*") {)",
		R"(        Write-Host "Files found within the OneDrive folder! Checking to see if a folder named OneDriveBackupFiles exists.")",
		R"(        Start-Sleep 1)",
		R"(              )",
		R"(        If (Test-Path "$env:USERPROFILE\Desktop\OneDriveBackupFiles") {)",
		R"(            Write-Host "A folder named OneDriveBackupFiles already exists on your desktop. All files from your OneDrive location will be moved to that folder." )",
		R"(        })",
		R"(        else {)",
		R"(            If (!(Test-Path "$env:USERPROFILE\Desktop\OneDriveBackupFiles")) {)",
		R"(                Write-Host "A folder named OneDriveBackupFiles will be created and will be located on your desktop. All files from your OneDrive location will be located in that folder.")",
		R"(                New-item -Path "$env:USERPROFILE\Desktop" -Name "OneDriveBackupFiles"-ItemType Directory -Force)",
		R"(                Write-Host "Successfully created the folder 'OneDriveBackupFiles' on your desktop.")",
		R"(            })",
		R"(        })",
		R"(        Start-Sleep 1)",
		R"(        Move-Item -Path "$env:USERPROFILE\OneDrive\*" -Destination "$env:USERPROFILE\Desktop\OneDriveBackupFiles" -Force)",
		R"(        Write-Host "Successfully moved all files/folders from your OneDrive folder to the folder 'OneDriveBackupFiles' on your desktop.")",
		R"(        Start-Sleep 1)",
		R"(        Write-Host "Proceeding with the removal of OneDrive.")",
		R"(        Start-Sleep 1)",
		R"(    })",
		R"(    Else {)",
		R"(        Write-Host "Either the OneDrive folder does not exist or there are no files to be found in the folder. Proceeding with removal of OneDrive.")",
		R"(        Start-Sleep 1)",
		R"(        Write-Host "Enabling the Group Policy 'Prevent the usage of OneDrive for File Storage'.")",
		R"(        $OneDriveKey = 'HKLM:Software\Policies\Microsoft\Windows\OneDrive')",
		R"(        If (!(Test-Path $OneDriveKey)) {)",
		R"(            Mkdir $OneDriveKey)",
		R"(            Set-ItemProperty $OneDriveKey -Name OneDrive -Value DisableFileSyncNGSC)",
		R"(        })",
		R"(        Set-ItemProperty $OneDriveKey -Name OneDrive -Value DisableFileSyncNGSC)",
		R"(    })",
		R"(    Write-Host "Uninstalling OneDrive. Please wait...")",
		R"(    )",
		R"(    New-PSDrive  HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT)",
		R"(    $onedrive = "$env:SYSTEMROOT\SysWOW64\OneDriveSetup.exe")",
		R"(    $ExplorerReg1 = "HKCR:\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}")",
		R"(    $ExplorerReg2 = "HKCR:\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}")",
		R"(    Stop-Process -Name "OneDrive*")",
		R"(    Start-Sleep 2)",
		R"(    If (!(Test-Path $onedrive)) {)",
		R"(        $onedrive = "$env:SYSTEMROOT\System32\OneDriveSetup.exe")",
		R"(        New-PSDrive  HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT)",
		R"(        $onedrive = "$env:SYSTEMROOT\SysWOW64\OneDriveSetup.exe")",
		R"(        $ExplorerReg1 = "HKCR:\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}")",
		R"(        $ExplorerReg2 = "HKCR:\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}")",
		R"(        Stop-Process -Name "OneDrive*")",
		R"(        Start-Sleep 2)",
		R"(        If (!(Test-Path $onedrive)) {)",
		R"(            $onedrive = "$env:SYSTEMROOT\System32\OneDriveSetup.exe")",
		R"(        })",
		R"(        Start-Process $onedrive "/uninstall" -NoNewWindow -Wait)",
		R"(        Start-Sleep 2)",
		R"(        Write-Output "Stopping explorer")",
		R"(        Start-Sleep 1)",
		R"(        taskkill.exe /F /IM explorer.exe)",
		R"(        Start-Sleep 3)",
		R"(        Write-Output "Removing leftover files")",
		R"(        Remove-Item "$env:USERPROFILE\OneDrive" -Force -Recurse)",
		R"(        Remove-Item "$env:LOCALAPPDATA\Microsoft\OneDrive" -Force -Recurse)",
		R"(        Remove-Item "$env:PROGRAMDATA\Microsoft OneDrive" -Force -Recurse)",
		R"(        If (Test-Path "$env:SYSTEMDRIVE\OneDriveTemp") {)",
		R"(            Remove-Item "$env:SYSTEMDRIVE\OneDriveTemp" -Force -Recurse)",
		R"(        })",
		R"(        Write-Output "Removing OneDrive from windows explorer")",
		R"(        If (!(Test-Path $ExplorerReg1)) {)",
		R"(            New-Item $ExplorerReg1)",
		R"(        })",
		R"(        Set-ItemProperty $ExplorerReg1 System.IsPinnedToNameSpaceTree -Value 0 )",
		R"(        If (!(Test-Path $ExplorerReg2)) {)",
		R"(            New-Item $ExplorerReg2)",
		R"(        })",
		R"(        Set-ItemProperty $ExplorerReg2 System.IsPinnedToNameSpaceTree -Value 0)",
		R"(        Write-Output "Restarting Explorer that was shut down before.")",
		R"(        Start-Process explorer.exe -NoNewWindow)",
		R"(    )",
		R"(        Write-Host "Enabling the Group Policy 'Prevent the usage of OneDrive for File Storage'.")",
		R"(        $OneDriveKey = 'HKLM:Software\Policies\Microsoft\Windows\OneDrive')",
		R"(        If (!(Test-Path $OneDriveKey)) {)",
		R"(            Mkdir $OneDriveKey )",
		R"(        })",
		R"(        Start-Process $onedrive "/uninstall" -NoNewWindow -Wait)",
		R"(        Start-Sleep 2)",
		R"(        Write-Host "Stopping explorer")",
		R"(        Start-Sleep 1)",
		R"(        taskkill.exe /F /IM explorer.exe)",
		R"(        Start-Sleep 3)",
		R"(        Write-Host "Removing leftover files")",
		R"(        If (Test-Path "$env:USERPROFILE\OneDrive") {)",
		R"(            Remove-Item "$env:USERPROFILE\OneDrive" -Force -Recurse)",
		R"(        })",
		R"(        If (Test-Path "$env:LOCALAPPDATA\Microsoft\OneDrive") {)",
		R"(            Remove-Item "$env:LOCALAPPDATA\Microsoft\OneDrive" -Force -Recurse)",
		R"(        })",
		R"(        If (Test-Path "$env:PROGRAMDATA\Microsoft OneDrive") {)",
		R"(            Remove-Item "$env:PROGRAMDATA\Microsoft OneDrive" -Force -Recurse)",
		R"(        })",
		R"(        If (Test-Path "$env:SYSTEMDRIVE\OneDriveTemp") {)",
		R"(            Remove-Item "$env:SYSTEMDRIVE\OneDriveTemp" -Force -Recurse)",
		R"(        })",
		R"(        Write-Host "Removing OneDrive from windows explorer")",
		R"(        If (!(Test-Path $ExplorerReg1)) {)",
		R"(            New-Item $ExplorerReg1)",
		R"(        })",
		R"(        Set-ItemProperty $ExplorerReg1 System.IsPinnedToNameSpaceTree -Value 0 )",
		R"(        If (!(Test-Path $ExplorerReg2)) {)",
		R"(            New-Item $ExplorerReg2)",
		R"(        })",
		R"(        Set-ItemProperty $ExplorerReg2 System.IsPinnedToNameSpaceTree -Value 0)",
		R"(        Write-Host "Restarting Explorer that was shut down before.")",
		R"(        Start-Process explorer.exe -NoNewWindow)",
		R"(        Write-Host "OneDrive has been successfully uninstalled!")",
		R"(        )",
		R"(        Remove-item env:OneDrive)",
		R"(    })",
		R"(})",
		R"(Function UnpinStart {)",
		R"(    # https://superuser.com/a/1442733)",
		R"(    #Requires -RunAsAdministrator)",
		R"($START_MENU_LAYOUT = @")",
		R"(<LayoutModificationTemplate xmlns:defaultlayout="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" xmlns:start="http://schemas.microsoft.com/Start/2014/StartLayout" Version="1" xmlns:taskbar="http://schemas.microsoft.com/Start/2014/TaskbarLayout" xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification">)",
		R"(    <LayoutOptions StartTileGroupCellWidth="6" />)",
		R"(    <DefaultLayoutOverride>)",
		R"(        <StartLayoutCollection>)",
		R"(            <defaultlayout:StartLayout GroupCellWidth="6" />)",
		R"(        </StartLayoutCollection>)",
		R"(    </DefaultLayoutOverride>)",
		R"(</LayoutModificationTemplate>)",
		R"("@)",
		R"(    $layoutFile="C:\Windows\StartMenuLayout.xml")",
		R"(    #Delete layout file if it already exists)",
		R"(    If(Test-Path $layoutFile))",
		R"(    {)",
		R"(        Remove-Item $layoutFile)",
		R"(    })",
		R"(    #Creates the blank layout file)",
		R"(    $START_MENU_LAYOUT | Out-File $layoutFile -Encoding ASCII)",
		R"(    $regAliases = @("HKLM", "HKCU"))",
		R"(    #Assign the start layout and force it to apply with "LockedStartLayout" at both the machine and user level)",
		R"(    foreach ($regAlias in $regAliases){)",
		R"(        $basePath = $regAlias + ":\SOFTWARE\Policies\Microsoft\Windows")",
		R"(        $keyPath = $basePath + "\Explorer" )",
		R"(        IF(!(Test-Path -Path $keyPath)) { )",
		R"(            New-Item -Path $basePath -Name "Explorer")",
		R"(        })",
		R"(        Set-ItemProperty -Path $keyPath -Name "LockedStartLayout" -Value 1)",
		R"(        Set-ItemProperty -Path $keyPath -Name "StartLayoutFile" -Value $layoutFile)",
		R"(    })",
		R"(    #Restart Explorer, open the start menu (necessary to load the new layout), and give it a few seconds to process)",
		R"(    Stop-Process -name explorer)",
		R"(    Start-Sleep -s 5)",
		R"(    $wshell = New-Object -ComObject wscript.shell; $wshell.SendKeys('^{ESCAPE}'))",
		R"(    Start-Sleep -s 5)",
		R"(    #Enable the ability to pin items again by disabling "LockedStartLayout")",
		R"(    foreach ($regAlias in $regAliases){)",
		R"(        $basePath = $regAlias + ":\SOFTWARE\Policies\Microsoft\Windows")",
		R"(        $keyPath = $basePath + "\Explorer" )",
		R"(        Set-ItemProperty -Path $keyPath -Name "LockedStartLayout" -Value 0)",
		R"(    })",
		R"(    #Restart Explorer and delete the layout file)",
		R"(    Stop-Process -name explorer)",
		R"(    # Uncomment the next line to make clean start menu default for all new users)",
		R"(    #Import-StartLayout -LayoutPath $layoutFile -MountPath $env:SystemDrive\)",
		R"(    Remove-Item $layoutFile)",
		R"(})",
		R"(Function Remove3dObjects {)",
		R"(    #Removes 3D Objects from the 'My Computer' submenu in explorer)",
		R"(    Write-Host "Removing 3D Objects from explorer 'My Computer' submenu")",
		R"(    $Objects32 = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}")",
		R"(    $Objects64 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}")",
		R"(    If (Test-Path $Objects32) {)",
		R"(        Remove-Item $Objects32 -Recurse )",
		R"(    })",
		R"(    If (Test-Path $Objects64) {)",
		R"(        Remove-Item $Objects64 -Recurse )",
		R"(    })",
		R"(})",
		R"(Function Restore3dObjects {)",
		R"(    #Restores 3D Objects from the 'My Computer' submenu in explorer)",
		R"(    Write-Host "Restoring 3D Objects from explorer 'My Computer' submenu")",
		R"(    $Objects32 = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}")",
		R"(    $Objects64 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}")",
		R"(    If (!(Test-Path $Objects32)) {)",
		R"(        New-Item $Objects32)",
		R"(    })",
		R"(    If (!(Test-Path $Objects64)) {)",
		R"(        New-Item $Objects64)",
		R"(    })",
		R"(})",
		R"(Write - Host "Creating PSDrive 'HKCR' (HKEY_CLASSES_ROOT). This will be used for the duration of the script as it is necessary for the removal and modification of specific registry keys.")",
		R"(New - PSDrive  HKCR - PSProvider Registry - Root HKEY_CLASSES_ROOT)",
		R"(Start - Sleep 1)",
	};

	inline std::vector<std::string> DEBLOAT_ALL = {
		R"(Write-Host "Uninstalling bloatware, please wait.")",
		R"(DebloatAll)",
		R"(Write-Host "Bloatware removed.")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Removing specific registry keys.")",
		R"(Remove-Keys)",
		R"(Write-Host "Leftover bloatware registry keys removed.")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Checking to see if any Whitelisted Apps were removed, and if so re-adding them.")",
		R"(Start-Sleep 1)",
		R"(FixWhitelistedApps)",
		R"(Start-Sleep 1)",
		R"(Write-Host "Disabling Cortana from search, disabling feedback to Microsoft, and disabling scheduled tasks that are considered to be telemetry or unnecessary.")",
		R"(Protect-Privacy)",
		R"(Start-Sleep 1)",
		R"(DisableCortana)",
		R"(Write-Host "Cortana disabled and removed from search, feedback to Microsoft has been disabled, and scheduled tasks are disabled.")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Stopping and disabling Diagnostics Tracking Service")",
		R"(DisableDiagTrack)",
		R"(Write-Host "Diagnostics Tracking Service disabled")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Disabling WAP push service")",
		R"(DisableWAPPush)",
		R"(Start-Sleep 1)",
		R"(Write-Host "Re-enabling DMWAppushservice if it was disabled")",
		R"(CheckDMWService)",
		R"(Start-Sleep 1)",
		R"(Write-Host "Removing 3D Objects from the 'My Computer' submenu in explorer")",
		R"(Remove3dObjects)",
		R"(Start-Sleep 1)",
	};
	
	inline std::vector<std::string> DEBLOAT_CUSTOM = {
		R"(Write-Host "Uninstalling bloatware, please wait.")",
		R"(DebloatBlacklist)",
		R"(Write-Host "Bloatware removed.")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Removing specific registry keys.")",
		R"(Remove-Keys)",
		R"(Write-Host "Leftover bloatware registry keys removed.")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Checking to see if any Whitelisted Apps were removed, and if so re-adding them.")",
		R"(Start-Sleep 1)",
		R"(FixWhitelistedApps)",
		R"(Start-Sleep 1)",
		R"(Write-Host "Disabling Cortana from search, disabling feedback to Microsoft, and disabling scheduled tasks that are considered to be telemetry or unnecessary.")",
		R"(Protect-Privacy)",
		R"(Start-Sleep 1)",
		R"(DisableCortana)",
		R"(Write-Host "Cortana disabled and removed from search, feedback to Microsoft has been disabled, and scheduled tasks are disabled.")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Stopping and disabling Diagnostics Tracking Service")",
		R"(DisableDiagTrack)",
		R"(Write-Host "Diagnostics Tracking Service disabled")",
		R"(Start-Sleep 1)",
		R"(Write-Host "Disabling WAP push service")",
		R"(Start-Sleep 1)",
		R"(DisableWAPPush)",
		R"(Write-Host "Re-enabling DMWAppushservice if it was disabled")",
		R"(CheckDMWService)",
		R"(Start-Sleep 1)",
	};
	
	inline std::vector<std::string> DISABLE_EDGE_PDF = {
		R"(Stop-EdgePDF)",
		R"(Write-Host "Edge will no longer take over as the default PDF viewer.")",
	};

	inline std::vector<std::string> DISABLE_ONEDRIVE = {
		R"(UninstallOneDrive)",
		R"(Write-Host "OneDrive is now removed from the computer.")",
	};

	inline std::vector<std::string> UNPIN_START = {
		R"(UnpinStart)",
		R"(Write-Host "Apps will remain pinned to the start menu.")",
	};

	inline std::vector<std::string> INSTALL_DOT_NET = {
		R"(Write-Host "Installing .NET Framework 3.5")",
		R"(DISM /Online /Enable-Feature /FeatureName:NetFx3 /All)",
		R"(Write-Host ".NET 3.5 has been successfully installed!")",
	};

	inline std::vector<std::string> REBOOT = {
		R"(Write-Host "Unloading the HKCR drive...")",
		R"(Remove-PSDrive HKCR)",
		R"(Start-Sleep 1)",
		R"(Write-Host "Initiating reboot.")",
		R"(Stop-Transcript)",
		R"(Start-Sleep 2)",
		R"(Restart-Computer)",
	};
	
	inline std::vector<std::tuple<std::string, std::vector<std::string>, bool>> debloatOptions = {
		{ "Disable EdgePDF", DISABLE_EDGE_PDF, false },
		{ "Disable OneDrive", DISABLE_ONEDRIVE, false },
		{ "Unpin Start Items", UNPIN_START, false },
		{ "Install .NET 3.5", INSTALL_DOT_NET, false },
		{ "Reboot", REBOOT, false },
	};

	inline std::map<std::string, std::string> appFiles = {
		{ "Git", "Git.Git" },
		{ "Zoom", "Zoom.Zoom" },
		{ "Viber" ,"Viber.Viber" },
		{ "Jami", "SFLinux.Jami" },
		{ "Putty", "PuTTY.PuTTY" },
		{ "Brave", "Brave.Brave" },
		{ "Tabby", "Eugeny.Tabby" },
		{ "Edge", "Microsoft.Edge" },
		{ "Chrome", "Google.Chrome" },
		{ "NodeJS", "OpenJS.NodeJS" },
		{ "WinSCP", "WinSCP.WinSCP" },
		{ "Skype", "Microsoft.Skype" },
		{ "Teams", "Microsoft.Teams" },
		{ "Matrix", "Element.Element" },
		{ "Hexchat", "HexChat.HexChat" },
		{ "Firefox", "Mozilla.Firefox" },
		{ "Rust", "Rustlang.Rust.MSVC" },
		{ "Python3", "Python.Python.3" },
		{ "Discord", "Discord.Discord"  },
		{ "Waterfox", "Waterfox.Waterfox" },
		{ "Obsidian", "Obsidian.Obsidian" },
		{ "WinMerge", "WinMerge.WinMerge" },
		{ "Foxit PDF", "Foxit.PhantomPDF" },
		{ "NodeJS LTS", "OpenJS.NodeJS.LTS" },
		{ "Slack", "SlackTechnologies.Slack" },
		{ "mRemoteNG", "mRemoteNG.mRemoteNG" },
		{ "LibreWolf", "LibreWolf.LibreWolf" },
		{ "Notepad++", "Notepad++.Notepad++" },
		{ "Signal", "OpenWhisperSystems.Signal" },
		{ "Tor Browser", "TorProject.TorBrowser" },
		{ "Telegram", "Telegram.TelegramDesktop" },
		{ "Joplin (FOXX Notes)", "Joplin.Joplin" },
		{ "Chromium", "eloston.ungoogled-chromium" },
		{ "Vivaldi", "VivaldiTechnologies.Vivaldi" },
		{ "VS Codium", "Git.Git;VSCodium.VSCodium" },
		{ "Jetbrains Toolbox", "JetBrains.Toolbox" },
		{ "Rust Remote Desktop", "RustDesk.RustDesk" }, 
		{ "WireShark", "WiresharkFoundation.Wireshark" },
		{ "OpenJDK Java 16", "AdoptOpenJDK.OpenJDK.16" },
		{ "VS Code", "Git.Git;Microsoft.VisualStudioCode" },
		{ "GitHub Desktop", "Git.Git;GitHub.GitHubDesktop" },
		{ "Adobe Reader DC", "Adobe.Acrobat.Reader.64-bit" },
		{ "OpenJDK Java 8", "EclipseAdoptium.Temurin.8.JRE" },
		{ "ONLYOffice Desktop", "ONLYOFFICE.DesktopEditors" },
		{ "Oracle Java 18", "EclipseAdoptium.Temurin.18.JRE" },
		{ "Advanced IP Scanner", "Famatech.AdvancedIPScanner" },
		{ "Visual Studio 2022", "Microsoft.VisualStudio.2022.Community" }, 
	};
	
	void ExecuteScript(std::string command, std::string finishedMessage);
	void Powershell(std::vector<std::string> file, std::string filename, std::string completeMessage);
	bool SaveScript(std::vector<std::string> commands, std::string filename, std::string ext, std::string path);
	bool CheckForWinget();
	void InstallApps(std::vector<std::string> apps);
	void Debloater(std::vector<std::vector<std::string>> commands);
}